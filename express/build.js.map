{"version":3,"sources":["webpack:///webpack/bootstrap 489ae186b29595dfa8f3","webpack:///./express/server.js","webpack:///external \"express\"","webpack:///external \"body-parser\"","webpack:///external \"graphql-server-express\"","webpack:///external \"express-jwt\"","webpack:///external \"aws-sdk\"","webpack:///./dynamodb/index.js","webpack:///./dynamodb/db.js","webpack:///./dynamodb/expression_builder.js","webpack:///./model/index.js","webpack:///./model/queries/index.js","webpack:///./model/queries/channel.js","webpack:///./model/types/channel.js","webpack:///external \"graphql\"","webpack:///./config/twobyfour.js","webpack:///./config/temp_twobyfour.js","webpack:///./model/types/recent_video.js","webpack:///./model/types/channel_input.js","webpack:///./~/twobyfour/lib/index.js","webpack:///./~/twobyfour/lib/twobyfour.js","webpack:///./~/twobyfour/lib/utils.js","webpack:///./~/twobyfour/lib/types/index.js","webpack:///./~/twobyfour/lib/types/date.js","webpack:///./model/validators/index.js","webpack:///external \"validator\"","webpack:///./model/mutations/index.js","webpack:///./model/mutations/create_channel.js","webpack:///./model/mutations/update_channel.js","webpack:///./model/mutations/add_video.js","webpack:///./model/types/video.js"],"names":["config","update","accessKeyId","secretAccessKey","region","setDoc","DynamoDB","DocumentClient","app","use","secret","credentialsRequired","json","schema","context","DB","viewer","req","user","formatError","message","error","details","stack","debug","endpointURL","listen","console","log","expression","docClient","doc","resourceCache","clearCache","getResource","params","get","promise","then","result","Item","Promise","reject","Error","putResource","put","updateResource","table","deleteResource","prechar","expressions","values","SET","items","push","Object","keys","map","attrKey","key","join","build","UpdateExpression","state","ExpressionAttributeValues","query","twobyfour","GraphQLObjectType","name","description","fields","channel","type","args","slug","resolve","root","info","TableName","Key","CHANNEL_TABLE","channelTypeSchema","title","blurb","logo_url","external_url","external_facebook","external_twitter","external_instagram","recent_videos","pre","post","mapObj","o","f","ctx","forEach","k","call","promiseChain","_arr","fn","arr","Array","isArray","reduce","p","item","keyChain","res","buildResolve","primaryResolver","finalResult","findOne","haystack","some","indexOf","processField","field","arg","a","mapObject","_schema","recentVideoTypeSchema","channel_position","youtube_id","duration","channelInputSchema","validators","isSlug","GraphQLInputObjectType","errReject","str","msg","fieldTransform","source","fieldName","isLength","min","max","options","val","matches","regex","mod","isAlphanumeric","locale","isURL","createChannel","updateChannel","addVideo","channelInput","TABLE_NAME","Expected","Exists","addVideoToChannel","video","channelType","COLLECTION","ADD","pos","channel_slug","video_url","videoMeta","url","_string","channel_id","_int","time_added"],"mappings":"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AEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,iCAAgC;AAChC;AACA,IAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,0BAAyB;AACzB;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;;AAEA;AACA,6B;;;;;;ACtMA;;AAEA;AACA;AACA,EAAC;;AAED,qGAAoG,mBAAmB,EAAE,mBAAmB,8HAA8H;;AAE1Q;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL,IAAG;AACH;;AAEA;AACA;AACA,yB;;;;;;ACxCA;;AAEA;AACA;AACA,EAAC;;AAED;;AAEA;;AAEA;;AAEA,uCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA,SAAQ,8BAA8B;AACtC,aAAY,kCAAkC;AAC9C,UAAS,+BAA+B;AACxC,YAAW,iCAAiC;AAC5C,cAAa,mCAAmC;AAChD,eAAc;AACd,G;;;;;;AC1BA;;AAEA;AACA;AACA,EAAC;;AAED;;AAEA;AACA;AACA;A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","file":"build.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 489ae186b29595dfa8f3","\nimport express from 'express'\nimport bodyParser from 'body-parser';\nimport { graphqlExpress, graphiqlExpress } from 'graphql-server-express'\nimport jwt from 'express-jwt'\nimport AWS from 'aws-sdk'\nimport DB from '/dynamodb'\nimport model from '/model'\n\n// setup aws\nAWS.config.update({\n  accessKeyId: '',\n  secretAccessKey: '',\n  region: 'us-east-1'\n});\n// init the database client\nDB.setDoc(new AWS.DynamoDB.DocumentClient({ region: 'us-east-1' }))\n\nconst app = express()\n\napp.use(jwt({\n  secret: 'raaaaasd-secret',\n  credentialsRequired: false\n}))\n\napp.use('/graphql', bodyParser.json(), graphqlExpress(req => ({\n  schema,\n  context: {\n    DB,\n    viewer: req.user\n  },\n  formatError: error => ({\n    message: error.message,\n    details: error.stack\n  }),\n  debug: true\n})))\n\n// graphiql page\napp.use('/graphiql', graphiqlExpress({\n  endpointURL: '/graphql',\n}));\n\napp.listen(3000, () => console.log('Churn API listening on port 3000'));\n\n\n\n// WEBPACK FOOTER //\n// ./express/server.js","module.exports = require(\"express\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"express\"\n// module id = 1\n// module chunks = 0","module.exports = require(\"body-parser\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"body-parser\"\n// module id = 2\n// module chunks = 0","module.exports = require(\"graphql-server-express\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"graphql-server-express\"\n// module id = 3\n// module chunks = 0","module.exports = require(\"express-jwt\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"express-jwt\"\n// module id = 4\n// module chunks = 0","module.exports = require(\"aws-sdk\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"aws-sdk\"\n// module id = 5\n// module chunks = 0","import DB from './db'\nimport expression from './expression_builder'\n\nexport {\n  expression\n}\n\nexport default DB\n\n\n\n// WEBPACK FOOTER //\n// ./dynamodb/index.js","/**\n * Dynamodb interface implementation\n */\n\n/**\n * The document client used to interface with the database\n */\nlet docClient\nconst setDoc = doc => docClient = doc\n\n/**\n * The cache used to store resources grabbed within a single call.\n * This is so that if multiple fields/permissions/validations require the\n * same resource within a call, it will only be grabbed once\n */\nlet resourceCache = {}\n\n/**\n * Clear the resource cache\n */\nconst clearCache = () => resourceCache = {}\n\n/**\n * Get a resource from the DB\n * The params provided match graphql's param object layout and context\n */\nconst getResource = (params) => {\n  return docClient.get(params).promise().then(result => {\n    return result.Item ? result.Item : Promise.reject(new Error('(getResource): Resource could not be found'))\n  })\n}\n\n/**\n * Put a resource in the DB\n * The params given match graphql's param object layout and context\n */\nconst putResource = (params) => {\n  return docClient.put(params).promise()\n}\n\n/**\n * Update a resource in the DB\n * The params given match graphq's param object layout and context\n */\nconst updateResource = (table, params, context) => {\n  return docClient.update(params).promise()\n}\n\n/**\n * Delete a resource in the DB\n * The params given match graphq's param object layout and context\n */\nconst deleteResource = (table, params, context) => {\n\n}\n\nexport default {\n  setDoc,\n  getResource,\n  putResource,\n  deleteResource\n}\n\n\n\n// WEBPACK FOOTER //\n// ./dynamodb/db.js","/**\n * Module for making dynamodb expressions easier to build\n */\n\n// character used to prepend the attribute variables\nconst prechar = ':'\n\nconst expression = ({ expressions, values }) => ({\n  SET(items) {\n    expressions.push('SET ' + Object.keys(items).map(key => {\n      const attrKey = prechar + key\n      values[attrKey] = items[key]\n      return `key=${attrKey}`\n    }).join(','))\n  },\n  build() {\n    return {\n      UpdateExpression: state.expressions.join(','),\n      ExpressionAttributeValues: values\n    }\n  }\n})\n\nexport default () => expression({\n  expressions: [],\n  values: {}\n})\n\n\n\n// WEBPACK FOOTER //\n// ./dynamodb/expression_builder.js","import queries from './queries'\nimport mutations from './mutations'\n\nexport default {\n  query: twobyfour(GraphQLObjectType, {\n    name: 'Query',\n    description: 'Root query type',\n    fields: queries\n  }),\n  /*mutation: twobyfour(GraphQLObjectType, {\n    name: 'Mutation',\n    description: 'Root mutation type',\n    fields: mutations\n  })*/\n}\n\n\n\n// WEBPACK FOOTER //\n// ./model/index.js","import channel from './channel'\n\nexport default {\n  channel\n}\n\n\n// WEBPACK FOOTER //\n// ./model/queries/index.js","import channelType, { CHANNEL_TABLE } from '/model/types/channel'\nimport channelInputSchema from '/model/types/channel_input'\n\nexport default {\n  type: channelType,\n  description: 'Find a certain channel by slug id',\n  args: {\n    slug: channelInputSchema.fields.slug\n  },\n  resolve (root, params, context, info) {\n    return context.DB.getResource({\n      TableName: CHANNEL_TABLE,\n      Key: params\n    }, context)\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./model/queries/channel.js","import { GraphQLObjectType, GraphQLString, GraphQLList } from 'graphql'\nimport twobyfour from '/config/twobyfour'\nimport recentVideo from './recent_video'\n\nexport const CHANNEL_TABLE = 'churn-channels'\n\nexport const channelTypeSchema = {\n  name: 'channel',\n  description: 'Type representing a single channel',\n  fields: {\n    slug: {\n      type: GraphQLString,\n      description: 'URL slug for the channel and also primary id'\n    },\n    title: {\n      type: GraphQLString,\n      description: 'The title of the channel'\n    },\n    blurb: {\n      type: GraphQLString,\n      description: 'A blurb explaining what the channel is about'\n    },\n    logo_url: {\n      type: GraphQLString,\n      description: 'The URL of the logo image for the channel'\n    },\n    external_url: {\n      type: GraphQLString,\n      description: 'The external URL related to the channel'\n    },\n    external_facebook: {\n      type: GraphQLString,\n      description: 'The facebook URL related to the channel'\n    },\n    external_twitter: {\n      type: GraphQLString,\n      description: 'The twitter URL related to the channel'\n    },\n    external_instagram: {\n      type: GraphQLString,\n      description: 'The instagram URL related to the channel'\n    },\n    recent_videos: {\n      type: new GraphQLList(recentVideo),\n      description: 'The list of most recently added videos',\n    }\n  }\n}\n\nexport default twobyfour(GraphQLObjectType, channelTypeSchema)\n\n\n\n// WEBPACK FOOTER //\n// ./model/types/channel.js","module.exports = require(\"graphql\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"graphql\"\n// module id = 13\n// module chunks = 0","import twobyfour from './temp_twobyfour'\n\n// override of default pre/post keys for twobyfour\nexport default (type, schema) => twobyfour(type, schema, {\n  pre: ['validators', 'permissions'],\n  post: ['analytics']\n})\n\n\n\n// WEBPACK FOOTER //\n// ./config/twobyfour.js","import {\n  GraphQLObjectType,\n  GraphQLInputObjectType,\n  defaultFieldResolver\n} from 'graphql'\n\n/**\n * Perform an Array.map like function on an object\n */\nconst mapObj = (o, f, ctx) => {\n  ctx = ctx || this\n  var result = {}\n  Object.keys(o).forEach(k => result[k] = f.call(ctx, o[k], k, o))\n  return result\n}\n\n/**\n * Given an array, reduce is into a synchronous promise chain.\n * Each iteration function is given an array item and the result\n * of the previous promise\n */\nconst promiseChain = (_arr, fn) => {\n  // turn single values into array\n  const arr = Array.isArray(_arr) ? _arr : [_arr]\n  // run a reduce chain of promises\n  return arr.reduce((p, item) => p.then(result => fn(item, result)), Promise.resolve())\n}\n\n/**\n * Given a schema object, and a set of keys, build a promise chain\n * that runs each function array for each found key, passing in the\n * usual graphql resolve parameters\n */\nconst keyChain = (schema, keys, root, args, context, info) =>\n  promiseChain(keys, key => schema[key] ?\n    promiseChain(schema[key], (fn, res) => fn(root, args, context, info, res)) :\n    Promise.resolve()\n  )\n\n/**\n * Given a schema object, and arrays of pre/post processing keys,\n * build a single graphql resolve function that runs a pre chain\n * before the primary resolver, and a post chain after. The post\n * chain will not error the graphql call on rejection, and will only\n * log a rejection result. This is because the resolver has already\n * been successful and thus should return to the user\n */\nconst buildResolve = (schema, pre, post) => (root, args, context, info) => {\n  // set the primary resolve (default if not found)\n  const primaryResolver = schema.resolve || defaultFieldResolver\n\n  // process any argument chain first if available\n  // args can only be part of the pre chain\n  return (schema.args ?\n    promiseChain(Object.keys(schema.args),\n      key => keyChain(schema.args[key], pre, root, args, context, info)) :\n    Promise.resolve()\n  )\n  // run the pre chain if applicable\n  .then(() => keyChain(schema, pre, root, args, context, info))\n  // run the primary resolver\n  .then(res => primaryResolver(root, args, context, info, res)\n    .then(finalResult => {\n      // run a post chain if applicable, but don't effect the final outcome\n      keyChain(schema, post, root, args, context, info)\n      // return asynch from post chain\n      return finalResult\n    })\n  )\n}\n\n/**\n * Given two arrays, return true if atleast one item is found in\n * both arrays.\n */\nconst findOne = (haystack, arr) => arr.some(item => haystack.indexOf(item) >= 0)\n\n/**\n * Given a field object, build chained resolve if applicable\n */\nconst processField = (field, { pre = [], post = [] }) => {\n  // only apply the resolve builder to fields that need it\n  const result = {\n    ...field\n  }\n\n  // check if pre/post keys are found, or there are args and\n  // they contain pre/post keys\n  const keys = Object.keys(field)\n  const args = fields.args ? Object.keys(field.args) : []\n\n  if(args.some(arg, a => findOne(pre, fields.args[a])) ||\n    findOne(pre, keys) ||\n    findOne(post, keys)){\n    // build the wrapping resolve chain\n    result.resolve = buildResolve(field, pre, post)\n  }\n\n  return result\n}\n\n/**\n * Given a graphql type schema, return a graphql type, but with\n * the schema modified to run a resolve pre/post chain if defined\n */\nconst twobyfour = (type, schema, config) => new type({\n  ...schema,\n  fields: mapObject(_schema.fields, field => processField(field, config))\n})\n\nexport default twobyfour\n\n\n\n// WEBPACK FOOTER //\n// ./config/temp_twobyfour.js","import { GraphQLObjectType, GraphQLString, GraphQLInt } from 'graphql'\nimport twobyfour from '/config/twobyfour'\n\nexport const recentVideoTypeSchema = {\n  name: 'recentVideo',\n  fields: {\n    channel_position: {\n      type: GraphQLInt,\n      description: 'The position of the recent video in the channel. Also the lookup id.'\n    },\n    youtube_id: {\n      type: GraphQLInt,\n      description: 'The youtube if of the recent video'\n    },\n    title: {\n      type: GraphQLInt,\n      description: 'The title of the recent video'\n    },\n    duration: {\n      type: GraphQLInt,\n      description: 'The duration of the recent video'\n    }\n  },\n  resolve(channel, params, context, info) {\n    return channel.recent_videos\n  }\n}\n\nexport default twobyfour(GraphQLObjectType, recentVideoTypeSchema)\n\n\n\n// WEBPACK FOOTER //\n// ./model/types/recent_video.js","import { GraphQLNonNull, GraphQLString } from 'graphql'\nimport { Types } from 'twobyfour'\nimport { isLength, matches, isURL } from '../validators'\n\nexport const channelInputSchema = {\n  name: 'channelInput',\n  fields: {\n    slug: {\n      type: GraphQLNonNull(GraphQLString),\n      description: 'The URL slug of the channel',\n      validators: [isLength(1, 64), isSlug]\n    },\n    title: {\n      type: GraphQLString,\n      description: 'The title of the channel',\n      validators: isLength(1, 64)\n    },\n    blurb: {\n      type: GraphQLString,\n      description: 'A blurb explaining what the channel is about',\n      validators: isLength(1, 256)\n    },\n    logo_url: {\n      type: GraphQLString,\n      description: 'The URL of the logo image for the channel',\n      validators: [\n        isURL()\n      ]\n    },\n    external_url: {\n      type: GraphQLString,\n      description: 'The external URL related to the channel',\n      validators: [\n        isURL()\n      ]\n    },\n    external_facebook: {\n      type: GraphQLString,\n      description: 'The facebook URL related to the channel',\n      validators: [\n        isURL()\n      ]\n    },\n    external_twitter: {\n      type: GraphQLString,\n      description: 'The twitter URL related to the channel',\n      validators: [\n        isURL()\n      ]\n    },\n    external_instagram: {\n      type: GraphQLString,\n      description: 'The instagram URL related to the channel',\n      validators: [\n        isURL()\n      ]\n    }\n  }\n}\n\nexport default twobyfour(GraphQLInputObjectType, channelInputSchema)\n\n\n\n// WEBPACK FOOTER //\n// ./model/types/channel_input.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultConfig = exports.Types = undefined;\n\nvar _twobyfour = require('./twobyfour');\n\nvar _twobyfour2 = _interopRequireDefault(_twobyfour);\n\nvar _types = require('./types');\n\nvar _types2 = _interopRequireDefault(_types);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.Types = _types2.default;\nexports.defaultConfig = _twobyfour.defaultConfig;\nexports.default = _twobyfour2.default;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/twobyfour/lib/index.js\n// module id = 18\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultConfig = undefined;\n\nvar _graphql = require('graphql');\n\nvar _utils = require('./utils');\n\n/**\n * Default config (in check order)\n */\nvar defaultConfig = [{\n  name: 'validators',\n  args: true\n}, {\n  name: 'permissions',\n  args: true,\n  read: true\n}];\n\n/**\n * Primary entry function into twobyfour. Expects a twobyfour schema,\n * and converts it into a usable graphql schema.\n */\nvar twobyfour = function twobyfour(schema) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultConfig;\n\n  // minimum expectation is queries\n  if (!schema.queries || Object.keys(schema.queries) === 0) {\n    throw new Error('twobyfour config must have a query object key set');\n  }\n\n  var graphqlSchema = {\n    query: new _graphql.GraphQLObjectType({\n      name: 'Query',\n      fields: (0, _utils.mapObj)(schema.queries, function (query) {\n        return parseRoot(query, config);\n      })\n    })\n  };\n\n  // parse mutations if available\n  if (schema.mutations && Object.keys(schema.mutations).length > 0) {\n    graphqlSchema.mutation = new _graphql.GraphQLObjectType({\n      name: 'Mutation',\n      fields: (0, _utils.mapObj)(schema.mutations, function (mutation) {\n        return parseRoot(mutation, config);\n      })\n    });\n  }\n\n  return new _graphql.GraphQLSchema(graphqlSchema);\n};\n\n// cache to hold the requested and parsed types\nvar typeCache = {};\n\n/**\n * Parse a field set with a name, and whether or not\n * it is an input type\n */\nvar parseType = function parseType(config) {\n  var name = config.name,\n      fields = config.fields;\n\n  // check for a scalar graphql type\n\n  if (config.graphql) {\n    return config.graphql;\n  }\n\n  // return cached type if available\n  if (typeCache[name]) {\n    return typeCache[name];\n  }\n\n  var _config = Object.assign({}, config, {\n    fields: (0, _utils.mapObj)(fields, parseField)\n  });\n\n  // set cache and return the correct object\n  return typeCache[name] = config.input ? new _graphql.GraphQLInputObjectType(_config) : new _graphql.GraphQLObjectType(_config);\n};\n\n/**\n * Parse an individual field of a type\n * It will recursively traverse the tree in the same manner\n * as graphql, but wrapping with extra requirements\n */\nvar parseField = function parseField(config) {\n  var list = config.list,\n      required = config.required,\n      type = config.type;\n\n\n  var childType = parseType(type);\n\n  if (required) {\n    childType = new _graphql.GraphQLNonNull(childType);\n  }\n\n  if (list) {\n    childType = new _graphql.GraphQLList(childType);\n  }\n\n  return Object.assign({}, config, {\n    type: childType\n  });\n};\n\n/**\n * Run arbitrary functor against a single field\n * validation functions\n */\nvar functorField = function functorField(key, value) {\n  var functors = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var context = arguments[3];\n  var info = arguments[4];\n\n  if (Array.isArray(functors)) {\n    // run the individual functors sequentially to ensure context caching works\n    return (0, _utils.pChain)(functors, function (v) {\n      return v(key, value, context, info);\n    });\n  }\n  // single validator\n  return functors(key, value, context, info);\n};\n\n/**\n * Run arbitrary functions over a key set, if matched to a \n * config with functions to run for that keyset\n */\nvar functorFields = function functorFields(name, values, defs, context, info) {\n  // validate each value in sequential order to enforce chaining\n  return (0, _utils.pChain)(Object.keys(values), function (key) {\n    var val = values[key];\n    var functorRan = functorField(key, values[key], defs[key][name], context, info);\n\n    // TODO: add support for array child types\n\n    // deal with nested value types (TODO: this might belong in functorField())\n    if ((0, _utils.isObjectWithKeys)(val)) {\n      return functorRan.then(function () {\n        return functorFields(name, val, defs[key].type.fields, context, info);\n      });\n    }\n    return functorRan;\n  });\n};\n\n/**\n * Run any available generators over a schema set, updating the relevant args\n */\nvar runGenerators = function runGenerators(values, defs, context, info) {\n  return (0, _utils.pChain)(Object.keys(defs), function (key) {\n    if (defs[key].generator) {\n      values[key] = defs[key].generator(values, context, info);\n    }\n  });\n};\n\n/**\n * Parse a config type, which could either be a query or a mutation.\n * The type makes no difference to the parser, as details should be on\n * the config objects.\n */\nvar parseRoot = function parseRoot(proc) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return {\n    type: parseType(proc.type),\n    args: (0, _utils.mapObj)(proc.args || {}, parseField),\n    // go through the config list of functor types to run\n    resolve: function resolve(root, args, context, info) {\n      return (0, _utils.pChain)(config, function (cat) {\n        return cat.args ? functorFields(cat.name, args, proc.args, context, info) : Promise.resolve();\n      }\n      // TODO: use info to pass desired keys to functorFields\n      /*.then(cat.read ? \n        functorFields(cat.name, type, proc.type, context, info) : \n          Promise.resolve())*/\n      )\n      // run any available generators\n      .then(function () {\n        return runGenerators(args, proc.args, context, info);\n      })\n      // run the actual resolver\n      .then(function () {\n        return proc.resolve(root, args, context, info);\n      });\n    }\n  };\n};\n\nexports.defaultConfig = defaultConfig;\nexports.default = twobyfour;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/twobyfour/lib/twobyfour.js\n// module id = 19\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * Perform an Array.map like function on an object\n */\nvar mapObj = function mapObj(o, f, ctx) {\n  ctx = ctx || undefined;\n  var result = {};\n  Object.keys(o).forEach(function (k) {\n    result[k] = f.call(ctx, o[k], k, o);\n  });\n  return result;\n};\n\n/**\n * Check if a variable is an object with keys\n */\nvar isObjectWithKeys = function isObjectWithKeys(value) {\n  return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && Object.keys(value).length > 0;\n};\n\n/**\n * Shorthand for chaining promise work sequentially\n */\nvar pChain = function pChain(arr, fn) {\n  return arr.reduce(function (a, b) {\n    return a.then(function () {\n      return fn(b);\n    });\n  }, Promise.resolve());\n};\n\nexports.mapObj = mapObj;\nexports.isObjectWithKeys = isObjectWithKeys;\nexports.pChain = pChain;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/twobyfour/lib/utils.js\n// module id = 20\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _graphql = require('graphql');\n\nvar _date = require('./date');\n\nvar _date2 = _interopRequireDefault(_date);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * This types file is used, in case there needs to be multi module type\n * matching at some stage. twobyfour converts to the correct types when\n * being parsed by certain modules. It is only for scalar types currently\n */\nexports.default = {\n  _id: { graphql: _graphql.GraphQLID },\n  _string: { graphql: _graphql.GraphQLString },\n  _int: { graphql: _graphql.GraphQLInt },\n  _float: { graphql: _graphql.GraphQLFloat },\n  _boolean: { graphql: _graphql.GraphQLBoolean },\n  _datetime: { graphql: _date2.default }\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/twobyfour/lib/types/index.js\n// module id = 21\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _graphql = require('graphql');\n\nexports.default = new _graphql.GraphQLScalarType({\n  name: 'DateTime',\n  serialize: function serialize(value) {\n    if (!(value instanceof Date)) {\n      // Is this how you raise a 'field error'?\n      throw new Error('Field error: value is not an instance of Date');\n    }\n    if (isNaN(value.getTime())) {\n      throw new Error('Field error: value is an invalid Date');\n    }\n    return value.toJSON();\n  },\n  parseValue: function parseValue(value) {\n    var date = new Date(value);\n    if (isNaN(date.getTime())) {\n      throw new Error('Field error: value is an invalid Date');\n    }\n    return date;\n  },\n  parseLiteral: function parseLiteral(ast) {\n    if (ast.kind !== Kind.STRING) {\n      throw new GraphQLError('Query error: Can only parse strings to dates but got a: ' + ast.kind, [ast]);\n    }\n    var result = new Date(ast.value);\n    if (isNaN(result.getTime())) {\n      throw new GraphQLError('Query error: Invalid date', [ast]);\n    }\n    if (ast.value !== result.toJSON()) {\n      throw new GraphQLError('Query error: Invalid date format, only accepts: YYYY-MM-DDTHH:MM:SS.SSSZ', [ast]);\n    }\n\n    return ast.value;\n  }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/twobyfour/lib/types/date.js\n// module id = 22\n// module chunks = 0","/**\n * Common validation functions\n * Mostly wrapped versions of node-validator with error strings\n */\nimport {\n  isLength as _isLength,\n  matches as _matches,\n  isAlphanumeric as _isAlphanumeric,\n  isURL as _isURL\n} from 'validator'\n\n// convenience error func\nconst errReject = (key, str, msg) =>\n  Promise.reject(new Error(`(${key}: ${str}) - ${msg}`))\n\n// convenience functon for transforming resolve into field resolve\nconst fieldTransform = fn => (source, args, context, { fieldName }) =>\n  fn(fieldName, source[fieldName])\n\n/**\n * Check length of string\n */\nconst isLength = (min, max, options = {}) => fieldTransform((key, val) => {\n  if(!_isLength(val, { min, max, ...options })){\n    return errReject(key, val, `Invalid length. Must be between ${min} and ${max} characters.`)\n  }\n})\n\n/**\n * Check for regex match for string\n */\nconst matches = (regex, mod) => fieldTransform((key, val) => {\n  if(!_matches(val, regex, mod)){\n    return errReject(key, val, `Invalid string. Must mutch regular expression: ${regex}.`)\n  }\n})\n\n/**\n * Check if string is alphanumeric\n **/\nconst isAlphanumeric = locale => fieldTransform((key, val) => {\n  if(!_isAlphanumeric(val, locale)){\n    return errReject(key, val, 'String must be contain only letters and numbers')\n  }\n})\n\n/**\n * Check is string is a valid URL\n **/\nconst isURL =  options => fieldTransform((key, val) => {\n  if(!_isURL(val, options)){\n    return errReject(key, str, 'String must be a valid URL.')\n  }\n})\n\n/**\n * Check if string is valid slug\n */\nconst isSlug = matches(/^[\\w\\d]+(?:-[\\w\\d]+)*$/)\n\nexport {\n  isLength,\n  matches,\n  isAlphanumeric,\n  isURL,\n  isSlug\n}\n\n\n\n// WEBPACK FOOTER //\n// ./model/validators/index.js","module.exports = require(\"validator\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"validator\"\n// module id = 24\n// module chunks = 0","import createChannel from './create_channel'\nimport updateChannel from './update_channel'\nimport addVideo from './add_video'\n\nexport default {\n  createChannel,\n  updateChannel,\n  addVideo\n}\n\n\n// WEBPACK FOOTER //\n// ./model/mutations/index.js","import channelType from '/model/types/channel'\nimport channelInputType from '/model/types/channel_input'\n//import { isAdmin } from '../permissions'\n\nexport default {\n  name: 'createChannel',\n  description: 'create a new channel',\n  type: channelType,\n  args: {\n    channel: {\n      type: channelInput,\n      description: 'The input channel object details'\n    }\n  },\n  //permissions: isAdmin,\n  resolve (root, { channel }, { DB }) {\n    return DB.putResource({\n      TableName: channelType.TABLE_NAME,\n      Item: channel,\n      Expected: {\n        slug: { Exists: false }\n      }\n    }).then(() => channel)\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./model/mutations/create_channel.js","import channelType from '/model/types/channel'\nimport channelInputType from '/model/types/channel_input'\nimport expression from '/dynamodb'\n//import { isAdmin } from '../permissions'\n\nexport default {\n  name: 'updateChannel',\n  description: 'update an existing channel',\n  type: channelType,\n  args: {\n    channel: {\n      type: channelInput,\n      description: 'The input channel object details'\n    }\n  },\n  //permissions: isChannelAdmin,\n  resolve (root, { channel }, { DB }) {\n    return DB.updateResource({\n      TableName: channelType.TABLE_NAME,\n      Key: { slug: channel.slug },\n      Expected: {\n        slug: { Exists: true }\n      },\n      ...expression().SET(channel).build()\n    }).then(() => channel)\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./model/mutations/update_channel.js","//import twobyfour, { or } from '/config/twobyfour'\nimport twobyfour from '/config/twobyfour'\nimport { GraphQLNonNull, GraphQLString } from 'graphql'\nimport videoType, { VIDEO_TABLE } from '/model/types/video'\nimport { isLength, isURL, isSlug } from '/model/validators'\n\n// add a video object to the channel collection\n// This adds to recent videos and returns the video position\n// where the actual video object should be added\nconst addVideoToChannel = (slug, video) => DB.updateResource({\n  TableName: channelType.COLLECTION,\n  Key: { slug },\n  Expected: {\n    slug: { Exists: true }\n  },\n  SET: {\n\n  },\n  ADD: {\n\n  }\n}).then(({ pos }) => pos)\n\n// The add video mutation schema\nexport default {\n  name: 'addVideo',\n  description: 'Add a video to a particular channel',\n  type: videoType,\n  args: {\n    channel_slug: {\n      type: GraphQLNonNull(GraphQLString),\n      description: 'The slug id of the channel to add the video to',\n      validators: [isLength(1, 64), isSlug]\n    },\n    video_url: {\n      type: GraphQLNonNull(GraphQLString),\n      description: 'The Youtube URL of the video to add',\n      validators: isURL()\n    }\n  },\n  /*permissions: or([\n    isAdmin,\n    isChannelAdmin(({ channel_slug }) => channel_slug)\n  ]),*/\n  resolve(root, { channel_slug, video_url }, { DB }, info){\n    // run meta\n    return videoMeta(video_url).then(video =>\n      // update channel collection, and the channels recent video set\n      addVideoToChannel(channel_slug, video).then(pos => {\n        video.pos = pos\n        DB.putResource({\n          TableName: VIDEO_TABLE,\n          Item: video\n        })\n        // finally we want to return the video object\n        .then(() => video)\n      })\n    )\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./model/mutations/add_video.js","import { Types } from 'twobyfour'\n\nexport default {\n  TABLE_NAME: 'churn-videos',\n  name: 'video',\n  fields: {\n    url: {\n      type: Types._string,\n      description: 'The URL by which the video was added',\n    },\n    channel_id: {\n      type: Types._string,\n      description: 'The slug id of the owning channel',\n    },\n    channel_position: {\n      type: Types._int,\n      description: 'the order of the video in the channel (reverse)',\n    },\n    youtube_id: {\n      type: Types._string,\n      description: 'The Youtube video id',\n    },\n    time_added: {\n      type: Types._string,\n      description: 'When the video was added to the channel',\n    },\n    title: {\n      type: Types._string,\n      description: 'The title of the video',\n    },\n    duration: {\n      type: Types._int,\n      description: 'Duration of the video in seconds',\n    }\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./model/types/video.js"],"sourceRoot":""}